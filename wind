#! /usr/bin/env python3
"""
This is the core of the Wind program. It is the main interface that the
user will interact with. This script handles commands and is able to manipulate
the wind_daemon.py daemon that drives the Wind transfer process. This script
also provides data about the program.

Author: tgsachse (Tiger Sachse)
Initial Release: 7/13/2017
Current Release: 7/14/2017
Version 0.2.0-beta
License: GNU GPLv3
"""
import os
import sys

def check_dirs():
    """
    
    """
    try:
        with open(f_links, 'r') as f:
            pass
    except FileNotFoundError:
        print("No links file exists. Please run 'wind setup' to make one.")
        quit()

    try:
        with open(f_service, 'r') as f:
            pass
    except FileNotFoundError:
        print("No service file exists. Would you like to create one at {}".format(f_service))
        i = input("(Y/n) > ")
        if i in ['y', 'Y', 'yes', 'Yes']:
            f_service_example = ['[Unit]\n',
                                 'Description=Wind Cloud Management Utility\n\n',
                                 '[Service]\n',
                                 'ExecStart=/usr/bin/wind_daemon.py\n\n',
                                 '[Install]\n',
                                 'WantedBy=default.target']
            for each in dirs:
                if not os.path.exists(each):
                    os.mkdir(each)
            with open(f_service, 'w') as f:
                for each in f_service_example:
                    f.write(each)

        elif i in ['n', 'N', 'no', 'No']:
            quit()

dirs = [os.path.expanduser('~/.config'),
        os.path.expanduser('~/.config/systemd'),
        os.path.expanduser('~/.config/systemd/user'),
        os.path.expanduser('~/.wind'),
        os.path.expanduser('~/.wind/logs'),
        os.path.expanduser('~/.wind/jobs')]

f_service = dirs[2] + '/wind.service'
f_links = dirs[3] + '/links.json'

try:
    command = sys.argv[1]
except IndexError:
    print("No command entered. Enter 'wind help' for a list of commands.")
    quit()

valid = ['start', 'stop',
         'enable', 'disable',
         'setup', 'status',
         'version', 'help']

if command in valid:
    if command == 'start':
        check_setup()
        os.system('systemctl --user start wind.service')
        print("Wind service started.")

    elif command == 'stop':
        check_setup()
        os.system('systemctl --user stop wind.service')
        print("Wind service stopped.")

    elif command == 'enable':
        check_setup()
        os.system('systemctl --user enable wind.service')
        print("Wind service enabled at login on next boot")
        print("Run 'wind start' to start the service right now.")

    elif command == 'disable':
        check_setup()
        os.system('systemctl --user disable wind.service')
        print("Wind service disabled at login on next boot")
        print("Run 'wind stop' to stop the service right now.")
        
    elif command == 'setup':
        os.system('wind_setup.py')
    
    elif command == 'status':
        pass

    elif command == 'version':
        os.system('clear')
        print("Wind Cloud Management Utility\n\n" +
              "Version: v0.2.0-beta\n" +
              "Author: tgsachse (Tiger Sachse)\n" +
              "Intitial Release: 7/13/2017\n" +
              "Current Release: 7/14/2017\n" +
              "License: GNU GPLv3")

    elif command == 'help':
        os.system('clear')
        print("Welcome to Wind. Here's a list of commands:\n" +
              "start    stop    enable\n" +
              "disable  setup   status\n" +
              "version  help")

else:
    print("Invalid command.")
